import tkinter as tk
from tkinter import messagebox

def tinh_toan_day_so(day_so):
    try:
        # Chuyển đổi chuỗi đầu vào thành một danh sách các số nguyên
        danh_sach_so = [int(so.strip()) for so in day_so.split(',')]
        return danh_sach_so
    except ValueError:
        messagebox.showerror("Lỗi", "Vui lòng nhập dãy số nguyên hợp lệ.")
        return None

def on_min_button_click(entry):
    day_so_input = entry.get()
    danh_sach_so = tinh_toan_day_so(day_so_input)
    if danh_sach_so:
        so_nho_nhat = min(danh_sach_so)
        messagebox.showinfo("Kết quả", f"Số nhỏ nhất: {so_nho_nhat}")

def on_max_button_click(entry):
    day_so_input = entry.get()
    danh_sach_so = tinh_toan_day_so(day_so_input)
    if danh_sach_so:
        so_lon_nhat = max(danh_sach_so)
        messagebox.showinfo("Kết quả", f"Số lớn nhất: {so_lon_nhat}")

def on_avg_button_click(entry):
    day_so_input = entry.get()
    danh_sach_so = tinh_toan_day_so(day_so_input)
    if danh_sach_so:
        trung_binh_cong = sum(danh_sach_so) / len(danh_sach_so)
        messagebox.showinfo("Kết quả", f"Trung bình cộng: {trung_binh_cong}")

def on_sum_button_click(entry):
    day_so_input = entry.get()
    danh_sach_so = tinh_toan_day_so(day_so_input)
    if danh_sach_so:
        tong = sum(danh_sach_so)
        messagebox.showinfo("Kết quả", f"Tổng các số: {tong}")

def on_product_button_click(entry):
    day_so_input = entry.get()
    danh_sach_so = tinh_toan_day_so(day_so_input)
    if danh_sach_so:
        tich = 1
        for so in danh_sach_so:
            tich *= so
        messagebox.showinfo("Kết quả", f"Tích các số: {tich}")

def recursive_predict_pattern(sequence):
    # Recursive function to predict the pattern of the sequence
    if len(sequence) < 3:
        return "Không đủ dữ liệu để dự đoán"
    elif all(sequence[i] - sequence[i-1] == sequence[1] - sequence[0] for i in range(2, len(sequence))):
        common_difference = sequence[1] - sequence[0]
        return f"Dãy số là cấp số cộng với công sai {common_difference}"
    elif all(sequence[i] / sequence[i-1] == sequence[1] / sequence[0] for i in range(2, len(sequence))):
        common_ratio = sequence[1] / sequence[0]
        return f"Dãy số là cấp số nhân với tỷ số {common_ratio}"
    else:
        return "Không thể dự đoán"

def on_predict_pattern_button_click(entry):
    day_so_input = entry.get()
    danh_sach_so = tinh_toan_day_so(day_so_input)
    if danh_sach_so:
        result = recursive_predict_pattern(danh_sach_so)
        messagebox.showinfo("Dự đoán quy luật", result)

def tinh_toan_tu_giao_dien():
    # Tạo cửa sổ GUI
    root = tk.Tk()
    root.title("Tính toán dãy số")

    # Tạo và hiển thị label
    label = tk.Label(root, text="Nhập dãy số nguyên, cách nhau bởi dấu phẩy:")
    label.pack()

    # Tạo và hiển thị ô nhập liệu
    entry = tk.Entry(root, width=40)
    entry.pack()

    # Tạo các nút tính toán riêng lẻ
    min_button = tk.Button(root, text="Số nhỏ nhất", command=lambda: on_min_button_click(entry))
    min_button.pack()

    max_button = tk.Button(root, text="Số lớn nhất", command=lambda: on_max_button_click(entry))
    max_button.pack()

    avg_button = tk.Button(root, text="Trung bình cộng", command=lambda: on_avg_button_click(entry))
    avg_button.pack()

    sum_button = tk.Button(root, text="Tổng các số", command=lambda: on_sum_button_click(entry))
    sum_button.pack()

    product_button = tk.Button(root, text="Tích các số", command=lambda: on_product_button_click(entry))
    product_button.pack()

    predict_pattern_button = tk.Button(root, text="Dự đoán quy luật", command=lambda: on_predict_pattern_button_click(entry))
    predict_pattern_button.pack()

    # Chạy vòng lặp chính của GUI
    root.mainloop()

# Gọi hàm để mở cửa sổ GUI và chờ người dùng nhập liệu
tinh_toan_tu_giao_dien()
